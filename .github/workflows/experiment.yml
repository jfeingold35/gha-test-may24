on:
  workflow_dispatch:
    inputs:
      release-type:
        type: choice
        description: What type of release is this?
        required: true
        options:
          - major
          - minor
          - patch

jobs:
  create-release-branch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      branch-name: ${{ steps.create-branch.branch_name }}
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      # checkout dev
      - uses: actions/checkout@v4
      # Increment version
      - run: |
          if [[ "${{ github.event_name }}" = "workflow_dispatch" ]]; then
            RELEASE_TYPE=${{ github.event.inputs.release-type }}
          else
            RELEASE_TYPE=minor
          fi
          npm --no-git-tag-version version $RELEASE_TYPE
      # Create the new branch on Github as a direct clone of `dev`
      - run: |
          NEW_VERSION=$(jq -r ".version" package.json)
          git stash
          git checkout dev
          git pull
          git checkout -b release-$NEW_VERSION
          git push --set-upstream origin release-$NEW_VERSION
          git stash pop
      - run: |
          NEW_VERSION=$(jq -r ".version" package.json)
          MESSAGE="Incrementing version for v$NEW_VERSION release"
          BRANCH=$(git rev-parse --abbrev-ref HEAD)
          NEW_PACKAGE_JSON=$(cat package.json | base64)
          NEW_PACKAGE_JSON=$(echo -b $NEW_PACKAGE_JSON)
          gh api graphql -F message="$MESSAGE" -F eho=`git rev-parse HEAD` -F branch="$BRANCH" -F newpackage="$NEW_PACKAGE_JSON" -f query='
          mutation ($message: String!, $eho: GitObjectID!, $newpackage: Base64String!, $branch: String!) {
            createCommitOnBranch(input: {
              branch: {
                repositoryNameWithOwner: "jfeingold35/gha-test-may24",
                branchName: $branch
              },
              message: {
                headline: $message
              },
              fileChanges: {
                additions: [
                  {
                    path: "package.json",
                    contents: $newpackage
                  }
                ]
              },
              expectedHeadOid: $eho
            }) {
              commit {
                id
              }
            }
          }'